package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.57

import (
	"context"
	"fmt"

	"github.com/t-yamakoshi/24-fresh-backend-v2/pkg/adapter/gqlgen"
	"github.com/t-yamakoshi/24-fresh-backend-v2/pkg/adapter/gqlgen/models"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input models.UserInput) (*models.User, error) {
	panic(fmt.Errorf("not implemented: CreateUser - createUser"))
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id int64, input models.UserInput) (*models.User, error) {
	panic(fmt.Errorf("not implemented: UpdateUser - updateUser"))
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id int64) (*models.User, error) {
	panic(fmt.Errorf("not implemented: DeleteUser - deleteUser"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id int64) (*models.User, error) {
	user, err := r.userUsecase.GetUser(ctx, id)
	if err != nil {
		return nil, err
	}
	return ToUserModel(user), nil
}

// ListUser is the resolver for the ListUser field.
func (r *queryResolver) ListUser(ctx context.Context, limit *int, offset *int) ([]*models.User, error) {
	panic(fmt.Errorf("not implemented: ListUser - ListUser"))
}

// Mutation returns gqlgen.MutationResolver implementation.
func (r *Resolver) Mutation() gqlgen.MutationResolver { return &mutationResolver{r} }

// Query returns gqlgen.QueryResolver implementation.
func (r *Resolver) Query() gqlgen.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
