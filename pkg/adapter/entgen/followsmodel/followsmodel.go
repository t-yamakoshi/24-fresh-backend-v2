// Code generated by ent, DO NOT EDIT.

package followsmodel

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the followsmodel type in the database.
	Label = "follows_model"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldFollowerUserID holds the string denoting the follower_user_id field in the database.
	FieldFollowerUserID = "follower_user_id"
	// FieldFolloweeUserID holds the string denoting the followee_user_id field in the database.
	FieldFolloweeUserID = "followee_user_id"
	// EdgeFollower holds the string denoting the follower edge name in mutations.
	EdgeFollower = "follower"
	// EdgeFollowee holds the string denoting the followee edge name in mutations.
	EdgeFollowee = "followee"
	// Table holds the table name of the followsmodel in the database.
	Table = "follows_models"
	// FollowerTable is the table that holds the follower relation/edge.
	FollowerTable = "follows_models"
	// FollowerInverseTable is the table name for the UserModel entity.
	// It exists in this package in order to avoid circular dependency with the "usermodel" package.
	FollowerInverseTable = "user_models"
	// FollowerColumn is the table column denoting the follower relation/edge.
	FollowerColumn = "follower_user_id"
	// FolloweeTable is the table that holds the followee relation/edge.
	FolloweeTable = "follows_models"
	// FolloweeInverseTable is the table name for the UserModel entity.
	// It exists in this package in order to avoid circular dependency with the "usermodel" package.
	FolloweeInverseTable = "user_models"
	// FolloweeColumn is the table column denoting the followee relation/edge.
	FolloweeColumn = "followee_user_id"
)

// Columns holds all SQL columns for followsmodel fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldFollowerUserID,
	FieldFolloweeUserID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the FollowsModel queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByFollowerUserID orders the results by the follower_user_id field.
func ByFollowerUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFollowerUserID, opts...).ToFunc()
}

// ByFolloweeUserID orders the results by the followee_user_id field.
func ByFolloweeUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFolloweeUserID, opts...).ToFunc()
}

// ByFollowerField orders the results by follower field.
func ByFollowerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFollowerStep(), sql.OrderByField(field, opts...))
	}
}

// ByFolloweeField orders the results by followee field.
func ByFolloweeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFolloweeStep(), sql.OrderByField(field, opts...))
	}
}
func newFollowerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FollowerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, FollowerTable, FollowerColumn),
	)
}
func newFolloweeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FolloweeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, FolloweeTable, FolloweeColumn),
	)
}
