// Code generated by ent, DO NOT EDIT.

package usermodel

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the usermodel type in the database.
	Label = "user_model"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCognitoID holds the string denoting the cognito_id field in the database.
	FieldCognitoID = "cognito_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldUserName holds the string denoting the user_name field in the database.
	FieldUserName = "user_name"
	// FieldBirthDate holds the string denoting the birth_date field in the database.
	FieldBirthDate = "birth_date"
	// FieldGender holds the string denoting the gender field in the database.
	FieldGender = "gender"
	// FieldSelfIntroduction holds the string denoting the self_introduction field in the database.
	FieldSelfIntroduction = "self_introduction"
	// FieldProfileImage holds the string denoting the profile_image field in the database.
	FieldProfileImage = "profile_image"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// EdgeFollowers holds the string denoting the followers edge name in mutations.
	EdgeFollowers = "followers"
	// EdgeFollowees holds the string denoting the followees edge name in mutations.
	EdgeFollowees = "followees"
	// Table holds the table name of the usermodel in the database.
	Table = "user_models"
	// FollowersTable is the table that holds the followers relation/edge.
	FollowersTable = "follows_models"
	// FollowersInverseTable is the table name for the FollowsModel entity.
	// It exists in this package in order to avoid circular dependency with the "followsmodel" package.
	FollowersInverseTable = "follows_models"
	// FollowersColumn is the table column denoting the followers relation/edge.
	FollowersColumn = "follower_user_id"
	// FolloweesTable is the table that holds the followees relation/edge.
	FolloweesTable = "follows_models"
	// FolloweesInverseTable is the table name for the FollowsModel entity.
	// It exists in this package in order to avoid circular dependency with the "followsmodel" package.
	FolloweesInverseTable = "follows_models"
	// FolloweesColumn is the table column denoting the followees relation/edge.
	FolloweesColumn = "followee_user_id"
)

// Columns holds all SQL columns for usermodel fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCognitoID,
	FieldName,
	FieldUserName,
	FieldBirthDate,
	FieldGender,
	FieldSelfIntroduction,
	FieldProfileImage,
	FieldEmail,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(int64) error
)

// Gender defines the type for the "gender" enum field.
type Gender string

// Gender values.
const (
	GenderMen   Gender = "men"
	GenderWomen Gender = "women"
	GenderOther Gender = "other"
)

func (ge Gender) String() string {
	return string(ge)
}

// GenderValidator is a validator for the "gender" field enum values. It is called by the builders before save.
func GenderValidator(ge Gender) error {
	switch ge {
	case GenderMen, GenderWomen, GenderOther:
		return nil
	default:
		return fmt.Errorf("usermodel: invalid enum value for gender field: %q", ge)
	}
}

// OrderOption defines the ordering options for the UserModel queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCognitoID orders the results by the cognito_id field.
func ByCognitoID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCognitoID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByUserName orders the results by the user_name field.
func ByUserName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserName, opts...).ToFunc()
}

// ByBirthDate orders the results by the birth_date field.
func ByBirthDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBirthDate, opts...).ToFunc()
}

// ByGender orders the results by the gender field.
func ByGender(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGender, opts...).ToFunc()
}

// BySelfIntroduction orders the results by the self_introduction field.
func BySelfIntroduction(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSelfIntroduction, opts...).ToFunc()
}

// ByProfileImage orders the results by the profile_image field.
func ByProfileImage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProfileImage, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByFollowersCount orders the results by followers count.
func ByFollowersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFollowersStep(), opts...)
	}
}

// ByFollowers orders the results by followers terms.
func ByFollowers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFollowersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByFolloweesCount orders the results by followees count.
func ByFolloweesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFolloweesStep(), opts...)
	}
}

// ByFollowees orders the results by followees terms.
func ByFollowees(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFolloweesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newFollowersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FollowersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, FollowersTable, FollowersColumn),
	)
}
func newFolloweesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FolloweesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, FolloweesTable, FolloweesColumn),
	)
}
