// Code generated by ent, DO NOT EDIT.

package entgen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/t-yamakoshi/24-fresh-backend-v2/pkg/adapter/entgen/predicate"
	"github.com/t-yamakoshi/24-fresh-backend-v2/pkg/adapter/entgen/usermodel"
)

// UserModelUpdate is the builder for updating UserModel entities.
type UserModelUpdate struct {
	config
	hooks    []Hook
	mutation *UserModelMutation
}

// Where appends a list predicates to the UserModelUpdate builder.
func (umu *UserModelUpdate) Where(ps ...predicate.UserModel) *UserModelUpdate {
	umu.mutation.Where(ps...)
	return umu
}

// SetUpdatedAt sets the "updated_at" field.
func (umu *UserModelUpdate) SetUpdatedAt(t time.Time) *UserModelUpdate {
	umu.mutation.SetUpdatedAt(t)
	return umu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (umu *UserModelUpdate) SetNillableUpdatedAt(t *time.Time) *UserModelUpdate {
	if t != nil {
		umu.SetUpdatedAt(*t)
	}
	return umu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (umu *UserModelUpdate) ClearUpdatedAt() *UserModelUpdate {
	umu.mutation.ClearUpdatedAt()
	return umu
}

// SetCognitoID sets the "cognito_id" field.
func (umu *UserModelUpdate) SetCognitoID(s string) *UserModelUpdate {
	umu.mutation.SetCognitoID(s)
	return umu
}

// SetNillableCognitoID sets the "cognito_id" field if the given value is not nil.
func (umu *UserModelUpdate) SetNillableCognitoID(s *string) *UserModelUpdate {
	if s != nil {
		umu.SetCognitoID(*s)
	}
	return umu
}

// SetName sets the "name" field.
func (umu *UserModelUpdate) SetName(s string) *UserModelUpdate {
	umu.mutation.SetName(s)
	return umu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (umu *UserModelUpdate) SetNillableName(s *string) *UserModelUpdate {
	if s != nil {
		umu.SetName(*s)
	}
	return umu
}

// SetUserName sets the "user_name" field.
func (umu *UserModelUpdate) SetUserName(s string) *UserModelUpdate {
	umu.mutation.SetUserName(s)
	return umu
}

// SetNillableUserName sets the "user_name" field if the given value is not nil.
func (umu *UserModelUpdate) SetNillableUserName(s *string) *UserModelUpdate {
	if s != nil {
		umu.SetUserName(*s)
	}
	return umu
}

// SetBirthDate sets the "birth_date" field.
func (umu *UserModelUpdate) SetBirthDate(t time.Time) *UserModelUpdate {
	umu.mutation.SetBirthDate(t)
	return umu
}

// SetNillableBirthDate sets the "birth_date" field if the given value is not nil.
func (umu *UserModelUpdate) SetNillableBirthDate(t *time.Time) *UserModelUpdate {
	if t != nil {
		umu.SetBirthDate(*t)
	}
	return umu
}

// SetGender sets the "gender" field.
func (umu *UserModelUpdate) SetGender(u usermodel.Gender) *UserModelUpdate {
	umu.mutation.SetGender(u)
	return umu
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (umu *UserModelUpdate) SetNillableGender(u *usermodel.Gender) *UserModelUpdate {
	if u != nil {
		umu.SetGender(*u)
	}
	return umu
}

// ClearGender clears the value of the "gender" field.
func (umu *UserModelUpdate) ClearGender() *UserModelUpdate {
	umu.mutation.ClearGender()
	return umu
}

// SetSelfIntroduction sets the "self_introduction" field.
func (umu *UserModelUpdate) SetSelfIntroduction(s string) *UserModelUpdate {
	umu.mutation.SetSelfIntroduction(s)
	return umu
}

// SetNillableSelfIntroduction sets the "self_introduction" field if the given value is not nil.
func (umu *UserModelUpdate) SetNillableSelfIntroduction(s *string) *UserModelUpdate {
	if s != nil {
		umu.SetSelfIntroduction(*s)
	}
	return umu
}

// ClearSelfIntroduction clears the value of the "self_introduction" field.
func (umu *UserModelUpdate) ClearSelfIntroduction() *UserModelUpdate {
	umu.mutation.ClearSelfIntroduction()
	return umu
}

// SetProfileImage sets the "profile_image" field.
func (umu *UserModelUpdate) SetProfileImage(s string) *UserModelUpdate {
	umu.mutation.SetProfileImage(s)
	return umu
}

// SetNillableProfileImage sets the "profile_image" field if the given value is not nil.
func (umu *UserModelUpdate) SetNillableProfileImage(s *string) *UserModelUpdate {
	if s != nil {
		umu.SetProfileImage(*s)
	}
	return umu
}

// ClearProfileImage clears the value of the "profile_image" field.
func (umu *UserModelUpdate) ClearProfileImage() *UserModelUpdate {
	umu.mutation.ClearProfileImage()
	return umu
}

// SetEmail sets the "email" field.
func (umu *UserModelUpdate) SetEmail(s string) *UserModelUpdate {
	umu.mutation.SetEmail(s)
	return umu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (umu *UserModelUpdate) SetNillableEmail(s *string) *UserModelUpdate {
	if s != nil {
		umu.SetEmail(*s)
	}
	return umu
}

// Mutation returns the UserModelMutation object of the builder.
func (umu *UserModelUpdate) Mutation() *UserModelMutation {
	return umu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (umu *UserModelUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, umu.sqlSave, umu.mutation, umu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (umu *UserModelUpdate) SaveX(ctx context.Context) int {
	affected, err := umu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (umu *UserModelUpdate) Exec(ctx context.Context) error {
	_, err := umu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (umu *UserModelUpdate) ExecX(ctx context.Context) {
	if err := umu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (umu *UserModelUpdate) check() error {
	if v, ok := umu.mutation.Gender(); ok {
		if err := usermodel.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf(`entgen: validator failed for field "UserModel.gender": %w`, err)}
		}
	}
	return nil
}

func (umu *UserModelUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := umu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(usermodel.Table, usermodel.Columns, sqlgraph.NewFieldSpec(usermodel.FieldID, field.TypeInt64))
	if ps := umu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if umu.mutation.CreatedAtCleared() {
		_spec.ClearField(usermodel.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := umu.mutation.UpdatedAt(); ok {
		_spec.SetField(usermodel.FieldUpdatedAt, field.TypeTime, value)
	}
	if umu.mutation.UpdatedAtCleared() {
		_spec.ClearField(usermodel.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := umu.mutation.CognitoID(); ok {
		_spec.SetField(usermodel.FieldCognitoID, field.TypeString, value)
	}
	if value, ok := umu.mutation.Name(); ok {
		_spec.SetField(usermodel.FieldName, field.TypeString, value)
	}
	if value, ok := umu.mutation.UserName(); ok {
		_spec.SetField(usermodel.FieldUserName, field.TypeString, value)
	}
	if value, ok := umu.mutation.BirthDate(); ok {
		_spec.SetField(usermodel.FieldBirthDate, field.TypeTime, value)
	}
	if value, ok := umu.mutation.Gender(); ok {
		_spec.SetField(usermodel.FieldGender, field.TypeEnum, value)
	}
	if umu.mutation.GenderCleared() {
		_spec.ClearField(usermodel.FieldGender, field.TypeEnum)
	}
	if value, ok := umu.mutation.SelfIntroduction(); ok {
		_spec.SetField(usermodel.FieldSelfIntroduction, field.TypeString, value)
	}
	if umu.mutation.SelfIntroductionCleared() {
		_spec.ClearField(usermodel.FieldSelfIntroduction, field.TypeString)
	}
	if value, ok := umu.mutation.ProfileImage(); ok {
		_spec.SetField(usermodel.FieldProfileImage, field.TypeString, value)
	}
	if umu.mutation.ProfileImageCleared() {
		_spec.ClearField(usermodel.FieldProfileImage, field.TypeString)
	}
	if value, ok := umu.mutation.Email(); ok {
		_spec.SetField(usermodel.FieldEmail, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, umu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usermodel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	umu.mutation.done = true
	return n, nil
}

// UserModelUpdateOne is the builder for updating a single UserModel entity.
type UserModelUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserModelMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (umuo *UserModelUpdateOne) SetUpdatedAt(t time.Time) *UserModelUpdateOne {
	umuo.mutation.SetUpdatedAt(t)
	return umuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (umuo *UserModelUpdateOne) SetNillableUpdatedAt(t *time.Time) *UserModelUpdateOne {
	if t != nil {
		umuo.SetUpdatedAt(*t)
	}
	return umuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (umuo *UserModelUpdateOne) ClearUpdatedAt() *UserModelUpdateOne {
	umuo.mutation.ClearUpdatedAt()
	return umuo
}

// SetCognitoID sets the "cognito_id" field.
func (umuo *UserModelUpdateOne) SetCognitoID(s string) *UserModelUpdateOne {
	umuo.mutation.SetCognitoID(s)
	return umuo
}

// SetNillableCognitoID sets the "cognito_id" field if the given value is not nil.
func (umuo *UserModelUpdateOne) SetNillableCognitoID(s *string) *UserModelUpdateOne {
	if s != nil {
		umuo.SetCognitoID(*s)
	}
	return umuo
}

// SetName sets the "name" field.
func (umuo *UserModelUpdateOne) SetName(s string) *UserModelUpdateOne {
	umuo.mutation.SetName(s)
	return umuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (umuo *UserModelUpdateOne) SetNillableName(s *string) *UserModelUpdateOne {
	if s != nil {
		umuo.SetName(*s)
	}
	return umuo
}

// SetUserName sets the "user_name" field.
func (umuo *UserModelUpdateOne) SetUserName(s string) *UserModelUpdateOne {
	umuo.mutation.SetUserName(s)
	return umuo
}

// SetNillableUserName sets the "user_name" field if the given value is not nil.
func (umuo *UserModelUpdateOne) SetNillableUserName(s *string) *UserModelUpdateOne {
	if s != nil {
		umuo.SetUserName(*s)
	}
	return umuo
}

// SetBirthDate sets the "birth_date" field.
func (umuo *UserModelUpdateOne) SetBirthDate(t time.Time) *UserModelUpdateOne {
	umuo.mutation.SetBirthDate(t)
	return umuo
}

// SetNillableBirthDate sets the "birth_date" field if the given value is not nil.
func (umuo *UserModelUpdateOne) SetNillableBirthDate(t *time.Time) *UserModelUpdateOne {
	if t != nil {
		umuo.SetBirthDate(*t)
	}
	return umuo
}

// SetGender sets the "gender" field.
func (umuo *UserModelUpdateOne) SetGender(u usermodel.Gender) *UserModelUpdateOne {
	umuo.mutation.SetGender(u)
	return umuo
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (umuo *UserModelUpdateOne) SetNillableGender(u *usermodel.Gender) *UserModelUpdateOne {
	if u != nil {
		umuo.SetGender(*u)
	}
	return umuo
}

// ClearGender clears the value of the "gender" field.
func (umuo *UserModelUpdateOne) ClearGender() *UserModelUpdateOne {
	umuo.mutation.ClearGender()
	return umuo
}

// SetSelfIntroduction sets the "self_introduction" field.
func (umuo *UserModelUpdateOne) SetSelfIntroduction(s string) *UserModelUpdateOne {
	umuo.mutation.SetSelfIntroduction(s)
	return umuo
}

// SetNillableSelfIntroduction sets the "self_introduction" field if the given value is not nil.
func (umuo *UserModelUpdateOne) SetNillableSelfIntroduction(s *string) *UserModelUpdateOne {
	if s != nil {
		umuo.SetSelfIntroduction(*s)
	}
	return umuo
}

// ClearSelfIntroduction clears the value of the "self_introduction" field.
func (umuo *UserModelUpdateOne) ClearSelfIntroduction() *UserModelUpdateOne {
	umuo.mutation.ClearSelfIntroduction()
	return umuo
}

// SetProfileImage sets the "profile_image" field.
func (umuo *UserModelUpdateOne) SetProfileImage(s string) *UserModelUpdateOne {
	umuo.mutation.SetProfileImage(s)
	return umuo
}

// SetNillableProfileImage sets the "profile_image" field if the given value is not nil.
func (umuo *UserModelUpdateOne) SetNillableProfileImage(s *string) *UserModelUpdateOne {
	if s != nil {
		umuo.SetProfileImage(*s)
	}
	return umuo
}

// ClearProfileImage clears the value of the "profile_image" field.
func (umuo *UserModelUpdateOne) ClearProfileImage() *UserModelUpdateOne {
	umuo.mutation.ClearProfileImage()
	return umuo
}

// SetEmail sets the "email" field.
func (umuo *UserModelUpdateOne) SetEmail(s string) *UserModelUpdateOne {
	umuo.mutation.SetEmail(s)
	return umuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (umuo *UserModelUpdateOne) SetNillableEmail(s *string) *UserModelUpdateOne {
	if s != nil {
		umuo.SetEmail(*s)
	}
	return umuo
}

// Mutation returns the UserModelMutation object of the builder.
func (umuo *UserModelUpdateOne) Mutation() *UserModelMutation {
	return umuo.mutation
}

// Where appends a list predicates to the UserModelUpdate builder.
func (umuo *UserModelUpdateOne) Where(ps ...predicate.UserModel) *UserModelUpdateOne {
	umuo.mutation.Where(ps...)
	return umuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (umuo *UserModelUpdateOne) Select(field string, fields ...string) *UserModelUpdateOne {
	umuo.fields = append([]string{field}, fields...)
	return umuo
}

// Save executes the query and returns the updated UserModel entity.
func (umuo *UserModelUpdateOne) Save(ctx context.Context) (*UserModel, error) {
	return withHooks(ctx, umuo.sqlSave, umuo.mutation, umuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (umuo *UserModelUpdateOne) SaveX(ctx context.Context) *UserModel {
	node, err := umuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (umuo *UserModelUpdateOne) Exec(ctx context.Context) error {
	_, err := umuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (umuo *UserModelUpdateOne) ExecX(ctx context.Context) {
	if err := umuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (umuo *UserModelUpdateOne) check() error {
	if v, ok := umuo.mutation.Gender(); ok {
		if err := usermodel.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf(`entgen: validator failed for field "UserModel.gender": %w`, err)}
		}
	}
	return nil
}

func (umuo *UserModelUpdateOne) sqlSave(ctx context.Context) (_node *UserModel, err error) {
	if err := umuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(usermodel.Table, usermodel.Columns, sqlgraph.NewFieldSpec(usermodel.FieldID, field.TypeInt64))
	id, ok := umuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`entgen: missing "UserModel.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := umuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usermodel.FieldID)
		for _, f := range fields {
			if !usermodel.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("entgen: invalid field %q for query", f)}
			}
			if f != usermodel.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := umuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if umuo.mutation.CreatedAtCleared() {
		_spec.ClearField(usermodel.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := umuo.mutation.UpdatedAt(); ok {
		_spec.SetField(usermodel.FieldUpdatedAt, field.TypeTime, value)
	}
	if umuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(usermodel.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := umuo.mutation.CognitoID(); ok {
		_spec.SetField(usermodel.FieldCognitoID, field.TypeString, value)
	}
	if value, ok := umuo.mutation.Name(); ok {
		_spec.SetField(usermodel.FieldName, field.TypeString, value)
	}
	if value, ok := umuo.mutation.UserName(); ok {
		_spec.SetField(usermodel.FieldUserName, field.TypeString, value)
	}
	if value, ok := umuo.mutation.BirthDate(); ok {
		_spec.SetField(usermodel.FieldBirthDate, field.TypeTime, value)
	}
	if value, ok := umuo.mutation.Gender(); ok {
		_spec.SetField(usermodel.FieldGender, field.TypeEnum, value)
	}
	if umuo.mutation.GenderCleared() {
		_spec.ClearField(usermodel.FieldGender, field.TypeEnum)
	}
	if value, ok := umuo.mutation.SelfIntroduction(); ok {
		_spec.SetField(usermodel.FieldSelfIntroduction, field.TypeString, value)
	}
	if umuo.mutation.SelfIntroductionCleared() {
		_spec.ClearField(usermodel.FieldSelfIntroduction, field.TypeString)
	}
	if value, ok := umuo.mutation.ProfileImage(); ok {
		_spec.SetField(usermodel.FieldProfileImage, field.TypeString, value)
	}
	if umuo.mutation.ProfileImageCleared() {
		_spec.ClearField(usermodel.FieldProfileImage, field.TypeString)
	}
	if value, ok := umuo.mutation.Email(); ok {
		_spec.SetField(usermodel.FieldEmail, field.TypeString, value)
	}
	_node = &UserModel{config: umuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, umuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usermodel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	umuo.mutation.done = true
	return _node, nil
}
