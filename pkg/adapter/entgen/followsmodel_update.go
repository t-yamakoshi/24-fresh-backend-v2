// Code generated by ent, DO NOT EDIT.

package entgen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/t-yamakoshi/24-fresh-backend-v2/pkg/adapter/entgen/followsmodel"
	"github.com/t-yamakoshi/24-fresh-backend-v2/pkg/adapter/entgen/predicate"
	"github.com/t-yamakoshi/24-fresh-backend-v2/pkg/adapter/entgen/usermodel"
)

// FollowsModelUpdate is the builder for updating FollowsModel entities.
type FollowsModelUpdate struct {
	config
	hooks    []Hook
	mutation *FollowsModelMutation
}

// Where appends a list predicates to the FollowsModelUpdate builder.
func (fmu *FollowsModelUpdate) Where(ps ...predicate.FollowsModel) *FollowsModelUpdate {
	fmu.mutation.Where(ps...)
	return fmu
}

// SetUpdatedAt sets the "updated_at" field.
func (fmu *FollowsModelUpdate) SetUpdatedAt(t time.Time) *FollowsModelUpdate {
	fmu.mutation.SetUpdatedAt(t)
	return fmu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fmu *FollowsModelUpdate) SetNillableUpdatedAt(t *time.Time) *FollowsModelUpdate {
	if t != nil {
		fmu.SetUpdatedAt(*t)
	}
	return fmu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (fmu *FollowsModelUpdate) ClearUpdatedAt() *FollowsModelUpdate {
	fmu.mutation.ClearUpdatedAt()
	return fmu
}

// SetFollowerUserID sets the "follower_user_id" field.
func (fmu *FollowsModelUpdate) SetFollowerUserID(i int64) *FollowsModelUpdate {
	fmu.mutation.SetFollowerUserID(i)
	return fmu
}

// SetNillableFollowerUserID sets the "follower_user_id" field if the given value is not nil.
func (fmu *FollowsModelUpdate) SetNillableFollowerUserID(i *int64) *FollowsModelUpdate {
	if i != nil {
		fmu.SetFollowerUserID(*i)
	}
	return fmu
}

// SetFolloweeUserID sets the "followee_user_id" field.
func (fmu *FollowsModelUpdate) SetFolloweeUserID(i int64) *FollowsModelUpdate {
	fmu.mutation.SetFolloweeUserID(i)
	return fmu
}

// SetNillableFolloweeUserID sets the "followee_user_id" field if the given value is not nil.
func (fmu *FollowsModelUpdate) SetNillableFolloweeUserID(i *int64) *FollowsModelUpdate {
	if i != nil {
		fmu.SetFolloweeUserID(*i)
	}
	return fmu
}

// SetFollowerID sets the "follower" edge to the UserModel entity by ID.
func (fmu *FollowsModelUpdate) SetFollowerID(id int64) *FollowsModelUpdate {
	fmu.mutation.SetFollowerID(id)
	return fmu
}

// SetFollower sets the "follower" edge to the UserModel entity.
func (fmu *FollowsModelUpdate) SetFollower(u *UserModel) *FollowsModelUpdate {
	return fmu.SetFollowerID(u.ID)
}

// SetFolloweeID sets the "followee" edge to the UserModel entity by ID.
func (fmu *FollowsModelUpdate) SetFolloweeID(id int64) *FollowsModelUpdate {
	fmu.mutation.SetFolloweeID(id)
	return fmu
}

// SetFollowee sets the "followee" edge to the UserModel entity.
func (fmu *FollowsModelUpdate) SetFollowee(u *UserModel) *FollowsModelUpdate {
	return fmu.SetFolloweeID(u.ID)
}

// Mutation returns the FollowsModelMutation object of the builder.
func (fmu *FollowsModelUpdate) Mutation() *FollowsModelMutation {
	return fmu.mutation
}

// ClearFollower clears the "follower" edge to the UserModel entity.
func (fmu *FollowsModelUpdate) ClearFollower() *FollowsModelUpdate {
	fmu.mutation.ClearFollower()
	return fmu
}

// ClearFollowee clears the "followee" edge to the UserModel entity.
func (fmu *FollowsModelUpdate) ClearFollowee() *FollowsModelUpdate {
	fmu.mutation.ClearFollowee()
	return fmu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fmu *FollowsModelUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, fmu.sqlSave, fmu.mutation, fmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fmu *FollowsModelUpdate) SaveX(ctx context.Context) int {
	affected, err := fmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fmu *FollowsModelUpdate) Exec(ctx context.Context) error {
	_, err := fmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fmu *FollowsModelUpdate) ExecX(ctx context.Context) {
	if err := fmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fmu *FollowsModelUpdate) check() error {
	if fmu.mutation.FollowerCleared() && len(fmu.mutation.FollowerIDs()) > 0 {
		return errors.New(`entgen: clearing a required unique edge "FollowsModel.follower"`)
	}
	if fmu.mutation.FolloweeCleared() && len(fmu.mutation.FolloweeIDs()) > 0 {
		return errors.New(`entgen: clearing a required unique edge "FollowsModel.followee"`)
	}
	return nil
}

func (fmu *FollowsModelUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fmu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(followsmodel.Table, followsmodel.Columns, sqlgraph.NewFieldSpec(followsmodel.FieldID, field.TypeInt))
	if ps := fmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if fmu.mutation.CreatedAtCleared() {
		_spec.ClearField(followsmodel.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := fmu.mutation.UpdatedAt(); ok {
		_spec.SetField(followsmodel.FieldUpdatedAt, field.TypeTime, value)
	}
	if fmu.mutation.UpdatedAtCleared() {
		_spec.ClearField(followsmodel.FieldUpdatedAt, field.TypeTime)
	}
	if fmu.mutation.FollowerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   followsmodel.FollowerTable,
			Columns: []string{followsmodel.FollowerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermodel.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fmu.mutation.FollowerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   followsmodel.FollowerTable,
			Columns: []string{followsmodel.FollowerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermodel.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fmu.mutation.FolloweeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   followsmodel.FolloweeTable,
			Columns: []string{followsmodel.FolloweeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermodel.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fmu.mutation.FolloweeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   followsmodel.FolloweeTable,
			Columns: []string{followsmodel.FolloweeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermodel.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{followsmodel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fmu.mutation.done = true
	return n, nil
}

// FollowsModelUpdateOne is the builder for updating a single FollowsModel entity.
type FollowsModelUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FollowsModelMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (fmuo *FollowsModelUpdateOne) SetUpdatedAt(t time.Time) *FollowsModelUpdateOne {
	fmuo.mutation.SetUpdatedAt(t)
	return fmuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fmuo *FollowsModelUpdateOne) SetNillableUpdatedAt(t *time.Time) *FollowsModelUpdateOne {
	if t != nil {
		fmuo.SetUpdatedAt(*t)
	}
	return fmuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (fmuo *FollowsModelUpdateOne) ClearUpdatedAt() *FollowsModelUpdateOne {
	fmuo.mutation.ClearUpdatedAt()
	return fmuo
}

// SetFollowerUserID sets the "follower_user_id" field.
func (fmuo *FollowsModelUpdateOne) SetFollowerUserID(i int64) *FollowsModelUpdateOne {
	fmuo.mutation.SetFollowerUserID(i)
	return fmuo
}

// SetNillableFollowerUserID sets the "follower_user_id" field if the given value is not nil.
func (fmuo *FollowsModelUpdateOne) SetNillableFollowerUserID(i *int64) *FollowsModelUpdateOne {
	if i != nil {
		fmuo.SetFollowerUserID(*i)
	}
	return fmuo
}

// SetFolloweeUserID sets the "followee_user_id" field.
func (fmuo *FollowsModelUpdateOne) SetFolloweeUserID(i int64) *FollowsModelUpdateOne {
	fmuo.mutation.SetFolloweeUserID(i)
	return fmuo
}

// SetNillableFolloweeUserID sets the "followee_user_id" field if the given value is not nil.
func (fmuo *FollowsModelUpdateOne) SetNillableFolloweeUserID(i *int64) *FollowsModelUpdateOne {
	if i != nil {
		fmuo.SetFolloweeUserID(*i)
	}
	return fmuo
}

// SetFollowerID sets the "follower" edge to the UserModel entity by ID.
func (fmuo *FollowsModelUpdateOne) SetFollowerID(id int64) *FollowsModelUpdateOne {
	fmuo.mutation.SetFollowerID(id)
	return fmuo
}

// SetFollower sets the "follower" edge to the UserModel entity.
func (fmuo *FollowsModelUpdateOne) SetFollower(u *UserModel) *FollowsModelUpdateOne {
	return fmuo.SetFollowerID(u.ID)
}

// SetFolloweeID sets the "followee" edge to the UserModel entity by ID.
func (fmuo *FollowsModelUpdateOne) SetFolloweeID(id int64) *FollowsModelUpdateOne {
	fmuo.mutation.SetFolloweeID(id)
	return fmuo
}

// SetFollowee sets the "followee" edge to the UserModel entity.
func (fmuo *FollowsModelUpdateOne) SetFollowee(u *UserModel) *FollowsModelUpdateOne {
	return fmuo.SetFolloweeID(u.ID)
}

// Mutation returns the FollowsModelMutation object of the builder.
func (fmuo *FollowsModelUpdateOne) Mutation() *FollowsModelMutation {
	return fmuo.mutation
}

// ClearFollower clears the "follower" edge to the UserModel entity.
func (fmuo *FollowsModelUpdateOne) ClearFollower() *FollowsModelUpdateOne {
	fmuo.mutation.ClearFollower()
	return fmuo
}

// ClearFollowee clears the "followee" edge to the UserModel entity.
func (fmuo *FollowsModelUpdateOne) ClearFollowee() *FollowsModelUpdateOne {
	fmuo.mutation.ClearFollowee()
	return fmuo
}

// Where appends a list predicates to the FollowsModelUpdate builder.
func (fmuo *FollowsModelUpdateOne) Where(ps ...predicate.FollowsModel) *FollowsModelUpdateOne {
	fmuo.mutation.Where(ps...)
	return fmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fmuo *FollowsModelUpdateOne) Select(field string, fields ...string) *FollowsModelUpdateOne {
	fmuo.fields = append([]string{field}, fields...)
	return fmuo
}

// Save executes the query and returns the updated FollowsModel entity.
func (fmuo *FollowsModelUpdateOne) Save(ctx context.Context) (*FollowsModel, error) {
	return withHooks(ctx, fmuo.sqlSave, fmuo.mutation, fmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fmuo *FollowsModelUpdateOne) SaveX(ctx context.Context) *FollowsModel {
	node, err := fmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fmuo *FollowsModelUpdateOne) Exec(ctx context.Context) error {
	_, err := fmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fmuo *FollowsModelUpdateOne) ExecX(ctx context.Context) {
	if err := fmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fmuo *FollowsModelUpdateOne) check() error {
	if fmuo.mutation.FollowerCleared() && len(fmuo.mutation.FollowerIDs()) > 0 {
		return errors.New(`entgen: clearing a required unique edge "FollowsModel.follower"`)
	}
	if fmuo.mutation.FolloweeCleared() && len(fmuo.mutation.FolloweeIDs()) > 0 {
		return errors.New(`entgen: clearing a required unique edge "FollowsModel.followee"`)
	}
	return nil
}

func (fmuo *FollowsModelUpdateOne) sqlSave(ctx context.Context) (_node *FollowsModel, err error) {
	if err := fmuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(followsmodel.Table, followsmodel.Columns, sqlgraph.NewFieldSpec(followsmodel.FieldID, field.TypeInt))
	id, ok := fmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`entgen: missing "FollowsModel.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, followsmodel.FieldID)
		for _, f := range fields {
			if !followsmodel.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("entgen: invalid field %q for query", f)}
			}
			if f != followsmodel.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if fmuo.mutation.CreatedAtCleared() {
		_spec.ClearField(followsmodel.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := fmuo.mutation.UpdatedAt(); ok {
		_spec.SetField(followsmodel.FieldUpdatedAt, field.TypeTime, value)
	}
	if fmuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(followsmodel.FieldUpdatedAt, field.TypeTime)
	}
	if fmuo.mutation.FollowerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   followsmodel.FollowerTable,
			Columns: []string{followsmodel.FollowerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermodel.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fmuo.mutation.FollowerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   followsmodel.FollowerTable,
			Columns: []string{followsmodel.FollowerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermodel.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fmuo.mutation.FolloweeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   followsmodel.FolloweeTable,
			Columns: []string{followsmodel.FolloweeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermodel.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fmuo.mutation.FolloweeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   followsmodel.FolloweeTable,
			Columns: []string{followsmodel.FolloweeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermodel.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &FollowsModel{config: fmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{followsmodel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fmuo.mutation.done = true
	return _node, nil
}
