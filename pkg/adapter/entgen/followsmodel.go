// Code generated by ent, DO NOT EDIT.

package entgen

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/t-yamakoshi/24-fresh-backend-v2/pkg/adapter/entgen/followsmodel"
	"github.com/t-yamakoshi/24-fresh-backend-v2/pkg/adapter/entgen/usermodel"
)

// FollowsModel is the model entity for the FollowsModel schema.
type FollowsModel struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// FollowerUserID holds the value of the "follower_user_id" field.
	FollowerUserID int64 `json:"follower_user_id,omitempty"`
	// FolloweeUserID holds the value of the "followee_user_id" field.
	FolloweeUserID int64 `json:"followee_user_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FollowsModelQuery when eager-loading is set.
	Edges        FollowsModelEdges `json:"edges"`
	selectValues sql.SelectValues
}

// FollowsModelEdges holds the relations/edges for other nodes in the graph.
type FollowsModelEdges struct {
	// Follower holds the value of the follower edge.
	Follower *UserModel `json:"follower,omitempty"`
	// Followee holds the value of the followee edge.
	Followee *UserModel `json:"followee,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// FollowerOrErr returns the Follower value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FollowsModelEdges) FollowerOrErr() (*UserModel, error) {
	if e.Follower != nil {
		return e.Follower, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: usermodel.Label}
	}
	return nil, &NotLoadedError{edge: "follower"}
}

// FolloweeOrErr returns the Followee value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FollowsModelEdges) FolloweeOrErr() (*UserModel, error) {
	if e.Followee != nil {
		return e.Followee, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: usermodel.Label}
	}
	return nil, &NotLoadedError{edge: "followee"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FollowsModel) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case followsmodel.FieldID, followsmodel.FieldFollowerUserID, followsmodel.FieldFolloweeUserID:
			values[i] = new(sql.NullInt64)
		case followsmodel.FieldCreatedAt, followsmodel.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FollowsModel fields.
func (fm *FollowsModel) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case followsmodel.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			fm.ID = int(value.Int64)
		case followsmodel.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				fm.CreatedAt = value.Time
			}
		case followsmodel.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				fm.UpdatedAt = value.Time
			}
		case followsmodel.FieldFollowerUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field follower_user_id", values[i])
			} else if value.Valid {
				fm.FollowerUserID = value.Int64
			}
		case followsmodel.FieldFolloweeUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field followee_user_id", values[i])
			} else if value.Valid {
				fm.FolloweeUserID = value.Int64
			}
		default:
			fm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the FollowsModel.
// This includes values selected through modifiers, order, etc.
func (fm *FollowsModel) Value(name string) (ent.Value, error) {
	return fm.selectValues.Get(name)
}

// QueryFollower queries the "follower" edge of the FollowsModel entity.
func (fm *FollowsModel) QueryFollower() *UserModelQuery {
	return NewFollowsModelClient(fm.config).QueryFollower(fm)
}

// QueryFollowee queries the "followee" edge of the FollowsModel entity.
func (fm *FollowsModel) QueryFollowee() *UserModelQuery {
	return NewFollowsModelClient(fm.config).QueryFollowee(fm)
}

// Update returns a builder for updating this FollowsModel.
// Note that you need to call FollowsModel.Unwrap() before calling this method if this FollowsModel
// was returned from a transaction, and the transaction was committed or rolled back.
func (fm *FollowsModel) Update() *FollowsModelUpdateOne {
	return NewFollowsModelClient(fm.config).UpdateOne(fm)
}

// Unwrap unwraps the FollowsModel entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fm *FollowsModel) Unwrap() *FollowsModel {
	_tx, ok := fm.config.driver.(*txDriver)
	if !ok {
		panic("entgen: FollowsModel is not a transactional entity")
	}
	fm.config.driver = _tx.drv
	return fm
}

// String implements the fmt.Stringer.
func (fm *FollowsModel) String() string {
	var builder strings.Builder
	builder.WriteString("FollowsModel(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fm.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fm.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fm.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("follower_user_id=")
	builder.WriteString(fmt.Sprintf("%v", fm.FollowerUserID))
	builder.WriteString(", ")
	builder.WriteString("followee_user_id=")
	builder.WriteString(fmt.Sprintf("%v", fm.FolloweeUserID))
	builder.WriteByte(')')
	return builder.String()
}

// FollowsModels is a parsable slice of FollowsModel.
type FollowsModels []*FollowsModel
